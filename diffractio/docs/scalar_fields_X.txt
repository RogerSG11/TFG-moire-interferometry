**********************************************
*       NOTES ON DIFFRACTIO PACKAGE          *
*--------------------------------------------*
*             SCALAR FIELDS X                *  
**********************************************

This module generates Scalar_field_X class and several functions for multiprocessing.

It is also required for generating masks and fieds.

Class for unidimensional scalar fields.

Main attributes:
    - self.x (numpy.array): linear array with equidistant positions. Preferrably, len(x) = 2^n.
    - self.wavelength (float): wavelength of the incident field
    - self.u (numpy.array): complex field, equal size as x
    - self.quality (float): quality of RS algorithm
    - self.info (str): description of data
    - self.type (str): class of the field
    - self.date (str): date

Methods:
    - Definition of a scalar field
        * instantiation, clear_field, print
        * add, substract for sources, multiply for masks and sources
        * save, load data
        * insert masks, insert_array_masks - insert other masks insert the mask
    - Propagation
        * fft, ifft - fourier transform
        * RS - Rayleigh Sommerfeld. It allows amplification of the field
        * BPM - Beam propagation method
    - Parameters
        * intensity, average intensity
        * get_edges (mainly for pylithography)
    - Drawing functions
        * draw
    - Functions
        * kernelRS, kernelRSinverse
    - Multiprocessing
        * polychromatic_multiprocessing
        * extended_source_multiprocessing
        * extended_polychromatic_source
        
Polychromatic examples can be performed with polychromatic_multiprocessing.

Finite size sources (incoherent sources) can be performed with extended_source_multiprocessing.

There is also a function for polychromatic and extended light sources.


----------------------------------------------
       DEFINITION OF SCALAR FIELD
----------------------------------------------

* __add__

    Adds two Scalar_field_X. For example two light sources or two masks.
    
    Parameters:
        - other (Scalar_field_X): 2nd field to add
        - kind (str): instruction how to add fields:
            - 'maximum1': mainly for masks. If t3 = t1 + t2 > 1 then t3=1.
            - 'standard': add fields u3 = u1 + u2 and does nothing
            
    Returns:
        Scalar_field_X: u3 = u1 + u2
        
* __sub__
    
    Substract two Scalar_field_X. For example two light sources or two masks.
    
    Parameters:
        - other (Scalar_field_X): field to substract
        
    Returns:
        - Scalar_field_X: u3 = u1 + u2
        
* __mul__

    Multiply two fields. For example: u1(x) = u0(x)*t(x)
    
    Parameters:
        - other (Scalar_field_X): field to multiply
    
    Returns:
        Scalar_field_X: u1(x) = u0(x) * t(x)
        
* clear_field

    Removes the field: self.u = 0
    
* save_data

* load_data

* cut_resample

    Cuts the field to the range (x0,x1). 
    If one of this x0,x1 positions is out of the self.x range it does nothing.
    It is also valid for resampling in the field, just write x0,x1 as the limits of self.x
    
    Parameters:
        - x_limits (numpy.array): (x0,x1) - starting and final points of cut
                                  if '' - takes the current limit x[0] and x[-1]
        - num_points (int): it resamples x, and u. 
                            [],'',0,None -> it leaves the points as it is
        - new_field (bool): if True returns a new Scalar_field_X
        - interp_kind (str): 'linear', 'nearest', 'zero', 'slinear', 'quadratic', 'cubic'
        
    Returns:
        (Scalar_field_X): if new_field is True
        
* incident_field:
    
    Incident field for the experiment. It takes a Scalar_source_X field.
    
    Parameters:
        - u0 (Scalar_source_X): field produced by Scalar_source_X (or a X field)
        
* filter

* insert_mask

    Insert mask t1 in mask self. It is performed using interpolation.
    
    Parameters:
        - t1 (Scalar_field_X): field X (shorter)
        - x0_mask1 (float): location of starting point at t0 of init point of t1
        - clean(bool): if True remove previous fields, else substitute
        - kind_position (str): 'left, 'center'
        
* insert_array_masks

    Insert several identical masks t1 in self.u according to positions x_pos
    
    Parameters:
        - t1 (Scalar_field_X): mask to insert
        - x_pos (numpy.array): array with locations
        - clean(bool): eliminate preview fields in self
        - kind_position (str): 'left, 'center' - positions are at left or center
        
----------------------------------------------
                PROPAGATION
----------------------------------------------

* fft

    Far field diffraction pattern using Fast Fourier Transform (FFT).
    (Fraunhofer diffraction)
    
    U(x,y,z) ~ F[U(x',y',0)]_{fx=x/(wvl*z), fy=y(wvl*z)}
    
    Parameters:
        - z (float): distance to the observation plane or focal of lens.
                     If None the exit is in radians.
        - shift (bool): if True, fftshift is performed
        - remove0 (bool): if True, central point is removed
        - matrix (bool): if True, only matrix is returned. If False, returns Scalar_field_X.
        - new_field (bool): if True returns Scalar_field_X, else it puts in self
        - verbose (bool): prints info
        
    Returns:
        - (array or Scalar_field_X or None): FFT of the input field
        
* ifft
    
    Fast Fourier Transform (fft) of the field.
    (Inverse fft)
    
    Parameters:
	    - z (float): distance to the observation plane or focal of lens
		- shift (bool): if True, fftshift is performed
		- remove0 (bool): if True, central point is removed
		- matrix (bool):  if True only matrix is returned. If False, returns Scalar_field_X
		- new_field (bool): if True returns Scalar_field_X, else it puts in self

	Returns:
		(array or Scalar_field_X or None): FFT of the input field
		
* RS / _RS_

    (Rayleigh-Sommerfeld)

    Fast-fourier transform method for numerical integration of diffraction Rayleigh-Sommerfeld
    formula. If we have a field N*M, the result of propagation is also a field N. Nevertheless,
    tgere is a parameter 'amplification' which allows us to determine the field in greater
    observation planes (jN)x(jM).
    
    Parameters:
        - amplification (int): number of frames in x direction
        - z (float): distance to observation plane. if z<0 inverse propagation is executed
        - n (float): refraction index
        - new_field (bool): if False the computation gos to self.u
                            if True a new instance is produced
        - fast (bool): instead of using Hankle function for RS kernel uses exponential
        - kind (str): 'z'
        - verbose (bool): if True it writes to shell
        
    Returns:
        if new_field is True: Scalar_field_X, else None
        
    Info:
        One advantage of this approach is that it returns a quality parameter:
        if self.quality > 1, propagation is right
        
    ------
    
    Fast-Fourier transform method for numerical integration of diffraction Rayleig-Sommerfeld
    formula. 'Thin Element Approximation' is considered for determining the field just after
    the mask.
    
        U0(x',y') = t(x',y')*Uinc(x',y')
        
    The near field approch is performed according to (l = wavelength): 
    (Fresnel diffraction)
    
        U(x,y,z) = exp(ikz)/(ilz) * integral[U0(x',y')*exp(ik/2z*[(x-x')^2+(y-y')^2])dx'dy']
        
    If we have a field of size N*M, the result of propagation is also a field N*M. 
    Nevertheless, there is a parameter 'amplification' which allows us to determine the field in 
    greater observation planes (jN)x(jM).
    
    One advantage of this approach is that it returns a quality parameter: 
    if self.quality>1, propagation is right.
    
    Parameters:
        - z (float): distance to observation plane. If z<0, inverse propagation is executed.
        - n (float): refraction index
        - matrix (bool): if True returns a matrix with result. 
                         It is much faster than new_field = True.
        - new_field (bool): if False the computation goes to self.u
                            if True returns a matrix with result
        - fast (bool): instead of using Hankle function for RS kernel uses exponential
        - xout (numpy.array): for amplification
        - verbose (bool): if True writes to shell
        
    Returns:
        (Scalar_field_X or None): if new_field is True Scalar_field_X, else None
        
    References:
        Applied Optics vol 45 num 6 pp. 1102-1120 (2006)
        
    Notes:
        - FFT convolution method w/ Simpson rule
        - RS kernel
        - See reference for details on convolution/kernel, for details on Simpson rule see
          Qiang, 'A high-order fast method for computing convolution integral with smooth kernel'
    
* BPM

    Beam propagation method (BPM).
    
    Parameters:
        - deltaz (float): propagation distance
        - n (numpy.array): refraction index
        - matrix (bool): if True returns matrix, else result in self.u
        - verbose (bool): shows data process by screen
        
    References:
        Algorithm in "Engineering optics with matlab" pag 119.
        
    Notes:
        - Axis were transposed in comparison to RS.
        - Function not very helpful here, used at XZ.
        - Sembla ser el mètode de convolució de la integral de Fresnel
        
        
----------------------------------------------
                PARAMETERS
----------------------------------------------
        
* normalize

    Normalizes a field to have intensity = 1.
    
    Parameters:
        - kind (str): 'intensity', 'amplitude', 'logarithm'. Normalization technique.
        - new_field (bool): if False the computation goes to self.u
                            if True a new instance is produced
   
   Returns:
    u (numpy.array): normalized optical field       
    
* MTF

    Computes the MTF (Modulation Transfer Function) of a field.
    If this field is near to focal point, the MTF will be wide.
    
    Parameters:
        kind (str): 'mm', 'degrees'
        has_draw (bool): if True draws the MTF
        
    Returns:
        (numpy.array) fx: frequencies in lines/mm
        (numpy.array) mtf_norm: normalized MTF
        
* intensity

    Intensity.
    
    Returns:
        (numpy.array): Intensity
        
* average_intensity

    Returns average intensity as: (np.abs(self.u)**2).sum() / num_data
    
    Returns:
        (float): average intensity  
        
* get_edges:
    
    Determine locations of edges for a binary mask. Valid for litography engraving of gratings.
    
    Parameters:
        - kind_transition: 'amplitude', 'phase'
                           if we see the amplitude or phase of the field
        - min_step: minimum step for consider a transition
        
    Returns:
        - type_transition: array with +1,-1 with rasing or falling edges
        - pos_transition: positions x of transitions
        - raising: positions of raising
        - falling: positions of falling
        
        
----------------------------------------------
            DRAWING FUNCTIONS
----------------------------------------------

* draw

    Draws X field
    
    Parameters:
        - kind (str): type of drawing
                      'amplitude', 'intensity', 'field', 'phase', 'fill', 'fft'
        - logarithm (bool): if True, intensity is scaled in logarithm
        - normalize (bool): if True, max(intensity)=1
        - cut_value (float): if not None, cuts the maximum intensity to this value
        - filename (str): if not '' stores drawing in file
        - scale (str): '', 'scaled', 'equal', scales the XY drawing
        
----------------------------------------------
            (KERNEL) FUNCTIONS
----------------------------------------------

* kernelRS

    Kernel for RS propagation.
    
        hk1 = sqrt(2/(pi*k*R))*exp(kR-3pi/4)
        
    Parameters:
        - x (numpy.array): positions x
        - wavelength (float): wavelength of incident field
        - z (float): distance for propagation
        - n (float): refraction index of background
        - kind (str): 'z', 'x', '0' - for simplifying vector propagation
        - fast (bool): if True the approximation is much faster
        
    Returns:
        (complex array): kernel
        
    References:
        https://dlmf.nist.gov/10.2#E5
        
        F. Shen and A. Wang, “Fast-Fourier-transform based numerical integration method for the Rayleigh-Sommerfeld diffraction formula,” Appl. Opt., vol. 45, no. 6, pp. 1102–1110, 2006.
        
* kernelRSinverse

* PWD_kernel

    Step for scalar (TE) Plane wave decomposition (PWD) algorithm.
    (Angular Spectrum Representation)
    
    Arguments:
        - u (np.array): field
        - n (np.array): refraction index
        - k0 (float): wavenumber
        - k_perp2 (np.array): transversal k**2
        - dz (float): increment in distances
        
    Returns:
        (numpy.array) Field at a distance dz from incident field
        
    References:
        Schmidt, S. et al. Wave-optical modeling beyond the thin-element-approximation. Opt. Express 24, 30188 (2016).
        
* WPM_schmidt_kernel

    Kernel for fast propagation of WPM method
    
    Arguments:
        u (np.array): field
        n (np.array): refraction number
        k0 (float): wavenumber
        k_perp2 (np.array): transversal k**2
        dz (float): increment in distances
        
    References:
        1. M. W. Fertig and K.-H. Brenner, “Vector wave propagation method,” J. Opt. Soc. Am. A, vol. 27, no. 4, p. 709, 2010.

		2. S. Schmidt et al., “Wave-optical modeling beyond the thin-element-approximation,” Opt. Express, vol. 24, no. 26, p. 30188, 2016.
		
		
----------------------------------------------
            (KERNEL) FUNCTIONS
----------------------------------------------

* polychromatic_multiprocessing

* extended_source_multiprocessing

* extended_polychromatic_source
